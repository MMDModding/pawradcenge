def corePlugin = ''

buildscript {
    repositories {
        jcenter()
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        maven {
            name = 'gradle'
            url 'https://plugins.gradle.org/m2/'
        }
        maven {
            name = 'sonatype'
            url = 'https://oss.sonatype.org/content/groups/public'
        }
        maven {
            name = 'sponge'
            url = 'http://repo.spongepowered.org/maven'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.0.11'
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'maven-publish'
apply plugin: 'org.sonarqube'

javadoc {
    failOnError = false
}

description = 'Power Advantage'
def mod_file = getModFile()
def mc_version = '1.10.2'

ext {
    short_version = getVersion('VERSION', mod_file)
}

version = mc_version + '-' + short_version
if (System.getenv().BUILD_NUMBER) {
    version += '.' + System.getenv().BUILD_NUMBER
}
group= 'cyano.poweradvantage'
archivesBaseName = 'PowerAdvantage'
sourceCompatibility = targetCompatibility = '1.8'

class Secrets {
    def data = null

    def getProperty(String key) {
        return data ? data[key] : ''
    }
}

import groovy.json.JsonSlurper

def secretFile
if (System.getenv().SECRET_FILE) {
    secretFile = file System.getenv().SECRET_FILE
} else {
    secretFile = file 'secret.json'
}

project.ext.secret = new Secrets()
if (secretFile.exists()) {
    secretFile.withReader {
        project.ext.secret.data = new JsonSlurper().parse it
    }
}

minecraft {
    version = '1.10.2-12.18.3.2185'
    runDir = 'run'
    mappings = 'stable_29'
//  coreMod = corePlugin
//  clientJvmArgs = ["-Dfml.coreMods.load=$corePlugin"]
//  serverJvmArgs = ["-Dfml.coreMods.load=$corePlugin"]
}

repositories {
    maven {
        name 'SpongePowered'
        url 'https://repo.spongepowered.org/maven/'
    }
    maven { // Mantle, TCon, JEI
        name 'DVS1 Maven FS'
        url 'http://dvs1.progwml6.com/files/maven'
    }
    maven { // CCL, CCC, NEI
        name 'Chickenbones Repo'
        url 'http://chickenbones.net/maven/'
    }
    maven { // The One Probe
        name 'tterrag'
        url 'http://maven.tterrag.com/'
    }
    maven {
        name 'MMD'
        url 'https://maven.mcmoddev.com/'
    }
    maven { // MCMultipart
        name 'amadornes'
        url 'http://maven.amadornes.com/'
    }
    maven { // Tesla
        name 'epoxide'
        url 'http://maven.epoxide.org'
    }
    maven { // CraftTweaker, ZenScript
        name 'jared maven'
        url 'http://blamejared.com/maven'
    }
    maven { // IC2
        name 'industrialcraft'
        url 'http://maven.ic2.player.to'
    }
    maven { // WAILA/HWYLA
    	name 'tehnut'
    	url 'http://tehnut.info/maven'
    }
    maven { // CoFH
    	name 'Covers Maven'
    	url 'http://maven.covers1624.net'
    }
	maven {
        name = 'CurseForge'
        url = 'https://minecraft.curseforge.com/api/maven/'
    }
	maven {
        name 'opencomputers'
        url 'http://maven.cil.li/'
    }
    maven { // Mekanism, TAIGA
        name 'jitpack'
        url 'https://jitpack.io'
    }
	maven {
		name = "Modmuss50"
		url = "http://maven.modmuss50.me/"
	}
}

dependencies {
	compile files(
			'libs/RF-API.jar',
//			'libs/RebornCore-1.9-API.jar'
    )
    compile "net.darkhax.tesla:Tesla:1.10.2-1.2.1.50"
    deobfCompile "cyano:BaseMetals:1.10.2-2.4.0"
//    compile "codechicken:CodeChickenCore:1.8-1.0.5.36:dev"
//    compile "codechicken:NotEnoughItems:1.8-1.0.5.104:dev"
	deobfCompile('RebornCore:RebornCore-1.10.2:+:universal') {
		transitive = false
	}
}

processResources {
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version

    from (sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': short_version, 'mcversion': project.minecraft.version
    }

    from (sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    manifest {
//      attributes 'FMLCorePluginContainsFMLMod': 'true'
//      attributes 'FMLCorePlugin': corePlugin
//      attributes 'FMLAT' : ''
    }
}

/*
task apiJar(type: Jar) {
    classifier = 'apiClasses'
    from apiClasses
}
*/

task deobfJar(type: Jar) {
    classifier = 'deobf'
    from sourceSets.main.output
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.getDestinationDir()
}

artifacts {
//  archives apiJar
    archives deobfJar
    archives sourceJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
            artifact sourceJar {
                classifier 'sources'
            }
/*
            artifact apiJar {
                classifier 'api'
            }
*/
            artifact deobfJar {
                classifier 'deobf'
            }
            artifact javadocJar {
                classifier 'javadoc'
            }
        }
    }
    repositories {
        maven {
            credentials {
                username secret.username
                password secret.password
            }
            url secret.url
        }
    }
}

curseforge {
    apiKey = secret.curseforgeAPIKey
    project {
        id = '240982'
        changelog = file('CHANGELOG.txt')
        releaseType = 'release'
        addGameVersion(project.mc_version)
        def projectName = 'Base Gems'
        def displayVersion = getVersion('VERSION', mod_file)
        if (System.getenv().BUILD_NUMBER) {
            displayVersion += '.' + System.getenv().BUILD_NUMBER
        }
        mainArtifact(jar) {
            displayName = "$project.description $displayVersion"
            relations {
                requiredLibrary 'mmd-orespawn'
                requiredLibrary 'base-metals'
                optionalLibrary 'additional-loot-tables'
            }
        }
//        addArtifact(apiJar) {
//            displayName = "$project.description $displayVersion API"
//        }
        addArtifact(sourceJar) {
            displayName = "$project.description $displayVersion Sources"
        }
        addArtifact(deobfJar) {
            displayName = "$project.description $displayVersion Development"
        }
        addArtifact(javadocJar) {
            displayName = "$project.description $displayVersion Javadoc"
        }
    }
}

sonarqube {
    properties {
        property 'sonar.host.url', secret.sonarHost
        property 'sonar.organization', secret.sonarOrganization
        property 'sonar.login', secret.sonarToken
        property 'sonar.projectName', project.archivesBaseName
        property 'sonar.projectKey', "$project.group:$project.archivesBaseName"
    }
}

String getModFile() {
    String path = ''
    FileTree tree = fileTree(dir: 'src/main/java')
    tree.include '**/*.java'
    tree.visit { element ->
        if (element.file.isFile()) {
            element.file.eachLine { String s ->
                s = s.trim()
                if (s.startsWith('@Mod(')) {
                    path = "src/main/java/$element.relativePath"
                }
            }
        }
    }
    return path
}

String getVersion(String type, String mod_file) {
    String major = '0'
    String revision = '0'
    String patch = '0'
    String prefix = "public static final String $type = \""
    File file = file(mod_file)
    file.eachLine { String s ->
        s = s.trim()
        if (s.startsWith(prefix)) {
            s = s.substring(prefix.length(), s.length() - 2)
            String[] pts = s.split("\\.")

            major = pts[0]
            revision = pts[1]
            patch = pts[2]
        }
    }
    return "$major.$revision.$patch"
}
